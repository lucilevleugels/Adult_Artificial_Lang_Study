knitr::opts_chunk$set(echo = TRUE)
library("here")
library("tidyverse")
library("tidyverse")
library("afex")
library("ggplot2")
library("afex")
library("ggplot2")
library("car")
# Read the condition key file (with exclusions)
conditionKey <- read_csv("ParticipantConditionKey.csv")
# Extract the condition and participant IDs
condition <- conditionKey$Condition
ids <- conditionKey$Participant_ID
# Create file names using the condition and participant IDs
file_names <- paste0("Test-Block-Source_", condition, "_", ids, ".csv")
# Create a data frame with file_names, condition, and ids as columns
file_names_cond_id <- tibble(file_names = file_names, condition = condition, participant_id = ids)
# Define a function to read data and calculate accuracy
calculate_accuracy <- function(file_name) {
# Read the participant data
data <- read_csv(file_name)
# Calculate and Add new columns with the overall + block accuracy for each participant
data$overall_accuracy <- mean(data$Accuracy, na.rm = TRUE) # Total test accuracy
data$block1_accuracy <- mean(data$Accuracy[data$block == "1"], na.rm = TRUE) # Block 1 test accuracy
data$block2_accuracy <- mean(data$Accuracy[data$block == "2"], na.rm = TRUE) # Block 2 test accuracy
data$block3_accuracy <- mean(data$Accuracy[data$block == "3"], na.rm = TRUE) # Block 3 test accuracy
data$block4_accuracy <- mean(data$Accuracy[data$block == "4"], na.rm = TRUE) # Block 4 test accuracy
data$file_names <- file_name
# Read the foil category key file and join (adding test item type info)
foilCategoryKey <- read_csv("FoilCategoryKey.csv")
data_joined <- left_join(data, foilCategoryKey, by = "trial")
# Extract the 'foil_category' column
data_joined$foilCategory <- data_joined$foil_category
return(data_joined)
}
# Subset current available file names (participants that we have actually run)
#need to change index according to how many participants files have been added/included
#current_file_names <- file_names_cond_id$file_names[1:47] #total participants (with no exclusions)
current_file_names <- file_names_cond_id$file_names[1:32] #total participants (with exclusions)
# Read each file, calculate accuracy, and combine them into one data frame
all_data <- current_file_names %>%
map_dfr(calculate_accuracy)
# Read each file, calculate accuracy, and combine them into one data frame
all_data <- current_file_names %>%
map_dfr(calculate_accuracy)
# Read each file, calculate accuracy, and combine them into one data frame
all_data <- current_file_names %>%
map_dfr(calculate_accuracy)
all_data <- left_join(all_data, file_names_cond_id, by = "file_names")
# View the combined data frame (accuracy only)
all_data_accuracy <- select(all_data, trial, participant_id, condition, foilCategory,Accuracy, overall_accuracy, block1_accuracy, block2_accuracy, block3_accuracy, block4_accuracy)
View(all_data_accuracy)
View(all_data_accuracy)
# subject-level data accuracy
data_subj = all_data_accuracy %>%
group_by(participant_id, condition)%>%
summarise(
overall_acc = mean(overall_accuracy),
block_1_acc = mean(block1_accuracy),
block_2_acc = mean(block2_accuracy),
block_3_acc = mean(block3_accuracy),
block_4_acc = mean(block4_accuracy)
)
View(data_subj)
View(data_subj)
ggplot(data_subj, aes(x = participant_id, y = overall_acc, fill = condition, group = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
labs(title = "Overall Accuracy by Participant", y = "Accuracy") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Adjust x-axis labels
# Aggregate data by subject
subject_accuracy <- all_data_accuracy %>%
group_by(participant_id) %>%
summarise(successes = sum(Accuracy), total_trials = n())
# Apply the binomial test for each subject and store the p-value
subject_accuracy$binomial_p_value <- sapply(seq_along(subject_accuracy$participant_id), function(i) {
test_result <- binom.test(subject_accuracy$successes[i], subject_accuracy$total_trials[i], p = 0.5)
test_result$p.value
})
subject_accuracy$rounded_pval= round(subject_accuracy$binomial_p_value, 4)
# View the results
print(subject_accuracy)
data_condition = data_subj %>%
group_by(condition) %>%
summarise(
overall_acc_mean = mean(overall_acc),
block_1_acc_mean = mean(block_1_acc),
block_2_acc_mean = mean(block_2_acc),
block_3_acc_mean = mean(block_3_acc),
block_4_acc_mean = mean(block_4_acc),
se_overall = sd(overall_acc, na.rm = TRUE) / sqrt(n()),
se_block_1 = sd(block_1_acc, na.rm = TRUE) / sqrt(n()),
se_block_2 = sd(block_2_acc, na.rm = TRUE) / sqrt(n()),
se_block_3 = sd(block_3_acc, na.rm = TRUE) / sqrt(n()),
se_block_4 = sd(block_4_acc, na.rm = TRUE) / sqrt(n()),
participant_count = n()
)
print(data_condition)
ggplot(data_condition, aes(x = condition, y = overall_acc_mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = overall_acc_mean - se_overall, ymax = overall_acc_mean + se_overall),
position = position_dodge(width = 0.8), width = 0.25) +
geom_text(aes(label = participant_count, y = overall_acc_mean + se_overall),
position = position_dodge(width = 0.8), vjust = -0.5) +
labs(title = "Overall Accuracy by Condition", y = "Accuracy") +
theme_minimal()
# Reshape accuracy data to long format
accuracy_long <- data_condition %>%
pivot_longer(
cols = starts_with("block_"),
names_to = "block",
values_to = "accuracy"
)
# Reshape SE data to long format
se_long <- data_condition %>%
pivot_longer(
cols = starts_with("se_block"),
names_to = "block",
values_to = "se"
) %>%
mutate(block = sub("se_", "", block)) # Adjust block names to match with accuracy data
# Join accuracy and SE data
data_long <- left_join(accuracy_long, se_long, by = c("condition", "block"))
# Create the plot
ggplot(data_long, aes(x = block, y = accuracy, group = condition, color = condition)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = accuracy - se, ymax = accuracy + se), width = 0.1) +
labs(title = 'Accuracy Analysis Over Experiment Blocks',
x = 'Experiment Blocks',
y = 'Accuracy') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calculate average accuracy and standard error for each condition and foil category
foil_accuracy_summary <- all_data_accuracy %>%
group_by(condition, foilCategory) %>%
summarise(
mean_accuracy = mean(Accuracy, na.rm = TRUE),
se = sd(Accuracy, na.rm = TRUE) / sqrt(n())
)
print(foil_accuracy_summary)
# Plotting
ggplot(foil_accuracy_summary, aes(x = condition, y = mean_accuracy, fill = foilCategory)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = mean_accuracy - se, ymax = mean_accuracy + se),
position = position_dodge(width = 0.8), width = 0.25) +
labs(title = "Average Accuracy by Condition and Foil Category",
x = "Condition", y = "Average Accuracy") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
theme(legend.title = element_blank())
# Aggregate data by subject
subject_accuracy <- all_data_accuracy %>%
group_by(participant_id) %>%
summarise(successes = sum(Accuracy), total_trials = n())
View(all_data_accuracy)
View(all_data_accuracy)
View(data_subj)
View(data_subj)
# Apply the binomial test for each subject and store the p-value
subject_accuracy$binomial_p_value <- sapply(seq_along(subject_accuracy$participant_id), function(i) {
test_result <- binom.test(subject_accuracy$successes[i], subject_accuracy$total_trials[i], p = 0.5)
test_result$p.value
})
subject_accuracy$rounded_pval= round(subject_accuracy$binomial_p_value, 4)
# View the results
print(subject_accuracy)
View(subject_accuracy)
View(subject_accuracy)
# Aggregate data by subject
subject_accuracy <- all_data_accuracy %>%
group_by(participant_id) %>%
summarise(successes = sum(Accuracy), total_trials = n())
View(subject_accuracy)
View(subject_accuracy)
# subject-level data accuracy
data_subj = all_data_accuracy %>%
group_by(participant_id, condition)%>%
summarise(
overall_acc = mean(overall_accuracy),
block_1_acc = mean(block1_accuracy),
block_2_acc = mean(block2_accuracy),
block_3_acc = mean(block3_accuracy),
block_4_acc = mean(block4_accuracy)
)
# Read the condition key file (with exclusions)
conditionKey <- read_csv("ParticipantConditionKey.csv")
# Read the condition key file with no exclusions (total participants)
#conditionKey <- read_csv("ParticipantConditionKey_NoExclusions.csv")
# Extract the condition and participant IDs
condition <- conditionKey$Condition
ids <- conditionKey$Participant_ID
# Create file names using the condition and participant IDs
file_names <- paste0("Test-Block-Source_", condition, "_", ids, ".csv")
# Create a data frame with file_names, condition, and ids as columns
file_names_cond_id <- tibble(file_names = file_names, condition = condition, participant_id = ids)
# Define a function to read data and calculate accuracy
calculate_accuracy <- function(file_name) {
# Read the participant data
data <- read_csv(file_name)
# Calculate and Add new columns with the overall + block accuracy for each participant
data$overall_accuracy <- mean(data$Accuracy, na.rm = TRUE) # Total test accuracy
data$block1_accuracy <- mean(data$Accuracy[data$block == "1"], na.rm = TRUE) # Block 1 test accuracy
data$block2_accuracy <- mean(data$Accuracy[data$block == "2"], na.rm = TRUE) # Block 2 test accuracy
data$block3_accuracy <- mean(data$Accuracy[data$block == "3"], na.rm = TRUE) # Block 3 test accuracy
data$block4_accuracy <- mean(data$Accuracy[data$block == "4"], na.rm = TRUE) # Block 4 test accuracy
data$file_names <- file_name
# Read the foil category key file and join (adding test item type info)
foilCategoryKey <- read_csv("FoilCategoryKey.csv")
data_joined <- left_join(data, foilCategoryKey, by = "trial")
# Extract the 'foil_category' column
data_joined$foilCategory <- data_joined$foil_category
return(data_joined)
}
# Subset current available file names (participants that we have actually run)
#need to change index according to how many participants files have been added/included
current_file_names <- file_names_cond_id$file_names[1:47] #total participants (with no exclusions)
#current_file_names <- file_names_cond_id$file_names[1:32] #total participants (with exclusions)
# Read each file, calculate accuracy, and combine them into one data frame
all_data <- current_file_names %>%
map_dfr(calculate_accuracy)
# Read each file, calculate accuracy, and combine them into one data frame
all_data <- current_file_names %>%
map_dfr(calculate_accuracy)
# Load the tidyverse package
library(tidyverse)
library(here)
# Automatically set the working directory to the project's top-level directory
setwd(here())
# List all files that start with "Test" and end with ".csv"
files <- list.files(pattern = "^Test.*\\.csv$")
# Read each file and store the data frames in a list
data_list <- map(files, read_csv)
# Optional: Combine all data frames into a single one
# (only if all data frames have the same structure)
combined_data <- bind_rows(data_list)
# List all files that start with "Test" and end with ".csv"
files <- list.files(pattern = "^Test*\\.csv$")
# Read each file and store the data frames in a list
data_list <- map(files, read_csv)
# Optional: Combine all data frames into a single one
# (only if all data frames have the same structure)
combined_data <- bind_rows(data_list)
# List all files that start with "Test" and end with ".csv"
files <- list.files(pattern = "^Test*\\.csv$")
# Read each file and store the data frames in a list
data_list <- map(files, read_csv)
# Optional: Combine all data frames into a single one
# (only if all data frames have the same structure)
combined_data <- bind_rows(data_list)
# List all files that start with "Test" and end with ".csv"
files <- list.files(pattern = "^Test.*\\.csv$")
# Read each file and store the data frames in a list
data_list <- map(files, read_csv)
# Optional: Combine all data frames into a single one
# (only if all data frames have the same structure)
combined_data <- bind_rows(data_list)
getwd()
